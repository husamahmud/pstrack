name: Database Backup

on:
  schedule:
    - cron: '0 */12 * * *' # Run every 12 hours
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install

      - name: Install tsx
        run: pnpm add -g tsx

      - name: Run backup script
        run: pnpm exec tsx scripts/backup.ts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Checkout backup repository
        uses: actions/checkout@v3
        with:
          repository: husamahmud/pstrack-backup
          token: ${{ secrets.PAT_TOKEN }}
          path: pstrack-backup

      - name: Copy backup files
        run: |
          # Define target directories based on current date
          YEAR_MONTH=$(date +'%Y-%m')
          YEAR_MONTH_DAY=$(date +'%Y-%m-%d')
          TARGET_DIR="pstrack-backup/${YEAR_MONTH}/${YEAR_MONTH_DAY}"

          # Create the target directory structure inside the backup repo path
          mkdir -p "${TARGET_DIR}"

          # Copy backup files (assuming they are in a 'backup/' directory after the script runs)
          cp -r backup/* "${TARGET_DIR}/"

          # Navigate into the backup repository directory
          cd pstrack-backup

          # Add timestamp file for this backup run (at the root of the backup repo)
          echo "Backup created: $(date)" > latest-backup.txt

          # Add all files including the new directory and updated timestamp file
          git add .

          # Only commit if there are changes
          COMMIT_MESSAGE="Backup ${YEAR_MONTH_DAY} $(date +'%H:%M:%S')"
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "${COMMIT_MESSAGE}"
            git push
          fi
